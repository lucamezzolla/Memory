package memory;

import java.awt.Toolkit;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Properties;
import javax.swing.JOptionPane;

/**
 *
 * @author Luca
 */
public class TimerForm extends javax.swing.JFrame {

    private final Properties prop;
    private final Properties propTimer;
    
    
    /**
     * Creates new form TimerForm
     * @param impProp
     * @throws java.io.IOException
     */
    public TimerForm(Properties impProp) throws IOException {
        
        initComponents();
        prop = impProp;
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("mind.png")));
        infoTimer.setText(prop.getProperty("timerInfo"));
        easy.setText(prop.getProperty("easy"));
        medium.setText(prop.getProperty("medium"));
        hard.setText(prop.getProperty("hard"));
        
        propTimer = new Properties();
        try {
            propTimer.load(new FileInputStream("timer.properties"));
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
        
        easyTimer.setText(propTimer.getProperty("easyTimer"));
        mediumTimer.setText(propTimer.getProperty("mediumTimer"));
        hardTimer.setText(propTimer.getProperty("hardTimer"));
        
        infoTimerWait.setText(prop.getProperty("timerInfoWait"));
        easyWait.setText(prop.getProperty("easy"));
        mediumWait.setText(prop.getProperty("medium"));
        hardWait.setText(prop.getProperty("hard"));
        
        easyWaitTimer.setText(propTimer.getProperty("easyWait"));
        mediumWaitTimer.setText(propTimer.getProperty("mediumWait"));
        hardWaitTimer.setText(propTimer.getProperty("hardWait"));
        
    }
    
    public boolean isNumeric(String str) {
        return str.matches("-?\\d+(.\\d+)?");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        easy = new javax.swing.JLabel();
        easyTimer = new javax.swing.JTextField();
        mediumTimer = new javax.swing.JTextField();
        medium = new javax.swing.JLabel();
        hardTimer = new javax.swing.JTextField();
        hard = new javax.swing.JLabel();
        okBut = new javax.swing.JButton();
        infoTimer = new javax.swing.JLabel();
        infoTimerWait = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        easyWait = new javax.swing.JLabel();
        mediumWait = new javax.swing.JLabel();
        hardWait = new javax.swing.JLabel();
        hardWaitTimer = new javax.swing.JTextField();
        mediumWaitTimer = new javax.swing.JTextField();
        easyWaitTimer = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        easy.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        easy.setText("jLabel1");

        easyTimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                easyTimerActionPerformed(evt);
            }
        });

        medium.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        medium.setText("jLabel1");

        hard.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        hard.setText("jLabel1");

        okBut.setText("OK");
        okBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButActionPerformed(evt);
            }
        });

        infoTimer.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        infoTimer.setText("jLabel4");

        infoTimerWait.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        infoTimerWait.setText("jLabel4");

        easyWait.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        easyWait.setText("jLabel1");

        mediumWait.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        mediumWait.setText("jLabel1");

        hardWait.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        hardWait.setText("jLabel1");

        easyWaitTimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                easyWaitTimerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addComponent(infoTimer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(okBut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(easy, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(easyTimer))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(medium, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mediumTimer, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(hard, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hardTimer, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE))
                    .addComponent(infoTimerWait, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(easyWait, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(easyWaitTimer))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(mediumWait, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mediumWaitTimer, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(hardWait, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hardWaitTimer, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(infoTimerWait)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(easyWait)
                    .addComponent(easyWaitTimer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mediumWait)
                    .addComponent(mediumWaitTimer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hardWait)
                    .addComponent(hardWaitTimer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(infoTimer)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(easy)
                    .addComponent(easyTimer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(medium)
                    .addComponent(mediumTimer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hard)
                    .addComponent(hardTimer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(okBut)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void easyTimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_easyTimerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_easyTimerActionPerformed

    private void okButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButActionPerformed
        if(isNumeric(easyWaitTimer.getText()) &&
           isNumeric(mediumWaitTimer.getText()) &&     
           isNumeric(hardWaitTimer.getText()) &&
           isNumeric(easyTimer.getText()) &&
           isNumeric(mediumTimer.getText()) &&     
           isNumeric(hardTimer.getText()))  {
            try {
                propTimer.setProperty("easyWait", String.valueOf(easyWaitTimer.getText()));
                propTimer.setProperty("mediumWait", String.valueOf(mediumWaitTimer.getText()));
                propTimer.setProperty("hardWait", String.valueOf(hardWaitTimer.getText()));
                propTimer.setProperty("easyTimer", String.valueOf(easyTimer.getText()));
                propTimer.setProperty("mediumTimer", String.valueOf(mediumTimer.getText()));
                propTimer.setProperty("hardTimer", String.valueOf(hardTimer.getText()));
                propTimer.store(new FileOutputStream("timer.properties"), null);
                dispose();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage());
                System.exit(0);
            }
        } else {
            JOptionPane.showMessageDialog(null, prop.getProperty("error"));
        }
    }//GEN-LAST:event_okButActionPerformed

    private void easyWaitTimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_easyWaitTimerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_easyWaitTimerActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel easy;
    private javax.swing.JTextField easyTimer;
    private javax.swing.JLabel easyWait;
    private javax.swing.JTextField easyWaitTimer;
    private javax.swing.JLabel hard;
    private javax.swing.JTextField hardTimer;
    private javax.swing.JLabel hardWait;
    private javax.swing.JTextField hardWaitTimer;
    private javax.swing.JLabel infoTimer;
    private javax.swing.JLabel infoTimerWait;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel medium;
    private javax.swing.JTextField mediumTimer;
    private javax.swing.JLabel mediumWait;
    private javax.swing.JTextField mediumWaitTimer;
    private javax.swing.JButton okBut;
    // End of variables declaration//GEN-END:variables
}